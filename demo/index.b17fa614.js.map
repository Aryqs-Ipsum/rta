{"mappings":"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","sources":["./src/gestures.ts","./src/index.ts","./src/demo/script.js"],"sourcesContent":["export default class Gestured {\r\n    el: HTMLElement;\r\n    offset: number;\r\n    scrollY: number;\r\n    scrollingTimeout: any;\r\n    isScrolling: boolean = false;\r\n    scrollBox: HTMLElement;\r\n    boxContent: HTMLElement;\r\n    closeCallback\r\n\r\n    constructor(el, closeCallback) {\r\n        this.el = el;\r\n        this.closeCallback = closeCallback;\r\n\r\n        this.scrollBox = this.el.querySelector('.rta__box')\r\n        if(this.scrollBox) {\r\n            this.scrollBox.addEventListener('scroll', (e) => {\r\n                this.isScrolling = true\r\n                window.clearTimeout( this.scrollingTimeout )\r\n                this.scrollingTimeout = setTimeout(function() {\r\n                    this.isScrolling = false\r\n                }, 66)\r\n            })\r\n        }\r\n\r\n        this.boxContent = this.el.querySelector('.rta__box-content')\r\n\r\n        // events\r\n        this.el.addEventListener('touchstart', this.panstart.bind(this))\r\n        this.el.addEventListener('touchmove', this.panmove.bind(this))\r\n        this.el.addEventListener('touchend', this.panend.bind(this))\r\n    }\r\n\r\n    panstart(e) {\r\n        this.scrollY = e.touches[0].clientY\r\n        this.el.style.transition = \"transform 0s\"\r\n    }\r\n  \r\n    panmove(e) {\r\n        this.offset = e.touches[0].clientY - this.scrollY\r\n        if(this.offset < 0 || !this.el.classList.contains('rta--opened')) return\r\n        if(this.scrollBox && this.isScrolling) {\r\n            if(this.scrollBox.scrollTop !== 0) return this.offset = 0\r\n        }\r\n        this.el.style.transform = `translate3D(0, ${this.offset}px, 0)`\r\n        if(this.boxContent)\r\n            this.boxContent.style.opacity = 1 - this.offset / window.innerHeight\r\n    }\r\n  \r\n    panend(e) {\r\n        this.el.style.transform = 'translate3D(0, 0, 0)'\r\n        this.el.style.transition = null\r\n        if(this.boxContent)\r\n            this.boxContent.style.opacity = null\r\n        if(this.offset > 150) {\r\n            this.offset = null\r\n            this.closeCallback(e)\r\n        }\r\n    }\r\n}","import Gestured from './gestures';\r\nimport './style.scss'\r\n\r\nexport default class RelToAbs {\r\n    el: HTMLElement\r\n    sections: Array<HTMLDivElement> = []\r\n    opened: boolean = false\r\n    placeholder: HTMLElement = null\r\n    options: object\r\n    defaultOptions: object = {\r\n        swipeToClose: true,\r\n        scrollToClose: false,\r\n        clickOutsideToClose: false,\r\n        scrollElement: document.body,\r\n        coloredPlaceholder: false\r\n    }\r\n\r\n    constructor(el, options = {}) {\r\n        this.el = el\r\n        this.options = Object.assign(this.defaultOptions, options)\r\n\r\n        // filter nodes and get only divs\r\n        this.el.childNodes.forEach(node => {\r\n            if(node.nodeName === 'DIV') {\r\n                this.sections.push(node)\r\n            }\r\n        })\r\n\r\n        // gestures \r\n        if(this.options.swipeToClose) {\r\n            new Gestured(this.el, this.close.bind(this))\r\n        }\r\n\r\n        // scroll to close\r\n        if(this.options.scrollToClose) {\r\n            this.options.scrollElement.addEventListener('scroll', this.close.bind(this))\r\n        }\r\n\r\n        // click outside to close\r\n        if(this.options.clickOutsideToClose) {\r\n            const backdrop = this.el.querySelector('.rta__backdrop')\r\n            backdrop.addEventListener('click', this.close.bind(this))\r\n        }\r\n\r\n        // close buttons\r\n        const closeButtons = this.el.querySelectorAll('.rta--close')\r\n        closeButtons.forEach(button => {\r\n            button.addEventListener('click', this.close.bind(this))\r\n        })\r\n\r\n        // open on click\r\n        this.el.addEventListener('click', this.open.bind(this))\r\n\r\n        this.el.classList.add('rta')\r\n    }\r\n\r\n    public open(event) {\r\n        if(this.opened) return\r\n        this.opened = true\r\n\r\n        // get divs dimensions \r\n        const position = this.getOffset(this.el)\r\n        const dimensions = {\r\n            width: this.el.offsetWidth,\r\n            height: this.el.offsetHeight\r\n        }\r\n\r\n        // create placeholder\r\n        this.createPlaceholder(dimensions)\r\n        \r\n        this.el.classList.add('rta--open')\r\n        this.el.style.top = position.top + 'px'\r\n        this.el.style.left = position.left + 'px'\r\n        this.el.style.width = dimensions.width + 'px'\r\n        this.el.style.height = dimensions.height + 'px'\r\n\r\n        if(!this.options.scrollToClose || this.options.swipeToClose) {\r\n            this.options.scrollElement.classList.add('rta--overflow-hidden')\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.el.classList.add('rta--opened')\r\n        }, 10)\r\n    }\r\n\r\n    public close(event) {\r\n        event.stopPropagation()\r\n        if(!this.opened) return\r\n        this.opened = false\r\n        navigator.vibrate(20)\r\n\r\n        this.el.classList.remove('rta--opened')\r\n\r\n        setTimeout(() => {\r\n            this.el.classList.remove('rta--open')\r\n            this.options.scrollElement.classList.remove('rta--overflow-hidden')\r\n            this.el.style.top = null\r\n            this.el.style.left = null\r\n            this.el.style.width = null\r\n            this.el.style.height = null\r\n            this.placeholder.remove()\r\n        }, 300)\r\n    }\r\n\r\n    private createPlaceholder(dimensions) {\r\n        this.placeholder = document.createElement('div')\r\n        this.placeholder.classList.add('rta__placeholder')\r\n        this.placeholder.style.width = dimensions.width + 'px'\r\n        this.placeholder.style.height = dimensions.height + 'px'\r\n        if(this.options.coloredPlaceholder)\r\n            this.placeholder.style.backgroundColor = this.options.coloredPlaceholder\r\n        this.el.parentNode.insertBefore(this.placeholder, this.el)\r\n    }\r\n\r\n    private getOffset(el) {\r\n        let x = 0\r\n        let y = 0\r\n        while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {\r\n            x += el.offsetLeft - el.scrollLeft\r\n            y += el.offsetTop - el.scrollTop\r\n            el = el.offsetParent\r\n        }\r\n        // remove scroll offset\r\n        x -= window.scrollX\r\n        y -= window.scrollY\r\n\r\n        return { top: y, left: x }\r\n    }\r\n\r\n}\r\n","import RelToAbs from '../index'\r\n\r\nconst openablePhoto = document.getElementById('photo');\r\nnew RelToAbs(openablePhoto);\r\n\r\nconst openabletext = document.getElementById('keep');\r\nnew RelToAbs(openabletext, {scrollToClose: true, swipeToClose: false, clickOutsideToClose: true});\r\n\r\nconst imageGrid = document.getElementById('images-grid');\r\nconst images = imageGrid.querySelectorAll('.relative-to-absolute');\r\nimages.forEach(image => {\r\n    new RelToAbs(image);\r\n});"],"names":["$1951871b100ddfaae17865c09ba76aa5$export$default","isScrolling","constructor","el","closeCallback","this","scrollBox","querySelector","addEventListener","e","window","clearTimeout","scrollingTimeout","setTimeout","boxContent","panstart","bind","panmove","panend","scrollY","touches","clientY","style","transition","offset","classList","contains","scrollTop","transform","opacity","innerHeight","$fe6805ae6a1acc57369ff96015183e28$export$default","sections","opened","placeholder","defaultOptions","swipeToClose","scrollToClose","clickOutsideToClose","scrollElement","document","body","coloredPlaceholder","options","Object","assign","childNodes","forEach","node","nodeName","push","close","querySelectorAll","button","open","add","event","position","getOffset","dimensions","width","offsetWidth","height","offsetHeight","createPlaceholder","top","left","stopPropagation","navigator","vibrate","remove","createElement","backgroundColor","parentNode","insertBefore","x","y","isNaN","offsetLeft","offsetTop","scrollLeft","offsetParent","scrollX","$f48efec27b64dda127aaa3ee5cba946a$var$openablePhoto","getElementById","$f48efec27b64dda127aaa3ee5cba946a$var$openabletext","image"],"version":3,"file":"index.b17fa614.js.map"}